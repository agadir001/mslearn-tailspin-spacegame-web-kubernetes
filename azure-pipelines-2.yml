# Docker image, Azure Container Registry, and Azure Kubernetes Service
# Build a Docker image, push it to an Azure Container Registry, and deploy it to Azure Kubernetes Service.
# Create deployment manifest if not exist.
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger: none

resources:
- repo: self

variables:
  # Update ACR.Name value with ACR name. Please note ACR names should be all lower-case and alphanumeric only.
  ACR.Name: 'acrtestsshtech'
  ACR.LoginServer: '$(ACR.Name).azurecr.io'
  ACR.ImageName: 'spacegame-web:$(Build.BuildId)'
  # Update AKS.ClusterName value Azure kubernetes cluster name.
  AKS.ClusterName: 'k8stest'
  AKS.ManifestDeploymentYaml: ''
  # Docker Container port
  Container.Port: 5000

jobs:
  - job: deploy
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'acrpush'
        repository: '$(ACR.Name)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/Dockerfile'
        buildContext: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/'
        tags: '$(Build.BuildId)'
    - bash: |
        echo "apiVersion : apps/v1beta1
        kind: Deployment
        metadata:
          name: $(ACR.Name)
        spec:
          replicas: 1
          template:
            metadata:
              labels:
                app: $(ACR.Name)
            spec:
              containers:
              - name: $(ACR.Name)
                image: $(ACR.LoginServer)/$(ACR.ImageName)
                ports:
                - containerPort: $(Container.Port)
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: $(ACR.Name)
        spec:
          type: LoadBalancer
          ports:
          - port: $(ACR.ImageName)
          selector:
            app: $(ACR.Name)" > $(AKS.ManifestDeploymentYaml)
      displayName: 'Generate kubernetes deployment yaml'
    - task: Kubernetes@1
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'sp-learn-aks'
        azureResourceGroup: 'rg-pretty-grubworm'
        kubernetesCluster: '$(AKS.ClusterName)'
        useClusterAdmin: true
        command: 'apply'
        arguments: '-f $(AKS.ManifestDeploymentYaml)'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'