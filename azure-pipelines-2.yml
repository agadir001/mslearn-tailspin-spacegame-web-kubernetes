# Docker image, Azure Container Registry, and Azure Kubernetes Service
# Build a Docker image, push it to an Azure Container Registry, and deploy it to Azure Kubernetes Service.
# Create deployment manifest if not exist.
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger: none

resources:
- repo: self

variables:
  # Update ACR.Name value with ACR name. Please note ACR names should be all lower-case and alphanumeric only.
  ACR.Name: 'acrtestsshtech'
  ACR.LoginServer: '$(ACR.Name).azurecr.io'
  ACR.ImageName: '$(ACR.LoginServer):$(Build.BuildId)'
  # Update AKS.ClusterName value Azure kubernetes cluster name.
  AKS.ClusterName: 'k8stest'
  AKS.ManifestDeploymentYaml: ''
  # Docker Container port
  Container.Port: 5000
  configMapName: deployconfigmap
  executetask: false
  manifestfile: manifests/myconfigmap.yaml

jobs:
  - job: deploy
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'acrpush'
        repository: '$(ACR.Name)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/Dockerfile'
        buildContext: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/'
        tags: '$(Build.BuildId)'
    - task: replacetokens@5
      inputs:
        targetFiles: 'manifests/deployment.yaml'
        encoding: 'auto'
        tokenPattern: 'custom'
        tokenPrefix: '__'
        tokenSuffix: '__'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        enableRecursion: false
        useLegacyPattern: false
        enableTelemetry: true
    #- task: Kubernetes@1
    #  displayName: Create ConfigMap
    #  inputs:
    #    connectionType: 'Azure Resource Manager'
    #    azureSubscriptionEndpoint: 'sp-learn-aks'
    #    azureResourceGroup: 'rg-pretty-grubworm'
    #    kubernetesCluster: 'k8stest'
    #    command: 'create'
     #   secretType: 'dockerRegistry'
     #   containerRegistryType: 'Azure Container Registry'
     #   configMapName: 'deployconfigmap'
     #   configMapArguments: '--from-literal=DEPLOYMENT_NAME=$(ACR.Name) --from-literal=IMAGE=$(ACR.ImageName) --from-literal=CONTAINER_NAME=$(ACR.Name)  --from-literal=DEPLOYMENT_LABEL=$(ACR.Name) --from-literal=PORT=$(Container.Port)'
    - task: Kubernetes@1
      displayName: apply
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'sp-learn-aks'
        azureResourceGroup: 'rg-pretty-grubworm'
        kubernetesCluster: 'k8stest'
        command: 'create'
        arguments: '-f $(manifestfile)'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
        configMapArguments: '--from-literal=key1=value1'
        #  apiVersion: v1
        #  kind: ConfigMap
        #  metadata:
        #    name: $(configMapName)
        #  data:
        #    DEPLOYMENT_NAME: $(ACR.Name)
        #    IMAGE: $(ACR.ImageName) 
        #    CONTAINER_NAME: $(ACR.Name)  
        #    DEPLOYMENT_LABEL: $(ACR.Name) 
        #    PORT: $(Container.Port
    - task: Kubernetes@1
      condition: eq(variables.executetask, true)
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'sp-learn-aks'
        azureResourceGroup: 'rg-pretty-grubworm'
        kubernetesCluster: '$(AKS.ClusterName)'
        useClusterAdmin: true
        command: 'apply'
        arguments: '-f $(AKS.ManifestDeploymentYaml)'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'