# Docker image, Azure Container Registry, and Azure Kubernetes Service
# Build a Docker image, push it to an Azure Container Registry, and deploy it to Azure Kubernetes Service.
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger: none

resources:
- repo: self

variables:
  # Update ACR.Name value with ACR name. Please note ACR names should be all lower-case and alphanumeric only.
  ACR.Name: 'acrtestsshtech'
  ACR.LoginServer: '$(ACR.Name).azurecr.io'
  ACR.ImageName: '$(ACR.LoginServer):$(Build.BuildId)'
  containerRegistry: '$(ACR.Name).azurecr.io'
  # Update AKS.ClusterName value Azure kubernetes cluster name.
  AKS.ClusterName: 'k8stest'
  AKS.ManifestDeploymentYaml: ''
  # Docker Container port
  Container.Port: 5000
  configMapName: deployconfigmap
  executetask: false
  manifestfile: manifests/deployment.yaml
  AKS.Namespace: 'demo'

jobs:
  - job: deploy
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'acrpush'
        repository: '$(ACR.Name)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/Dockerfile'
        buildContext: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/'
        tags: 'web/$(Build.BuildId)'
    - task: replacetokens@5
      inputs:
        targetFiles: '$(manifestfile)'
        encoding: 'auto'
        tokenPattern: 'custom'
        tokenPrefix: '__'
        tokenSuffix: '__'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        enableRecursion: false
        useLegacyPattern: false
        enableTelemetry: true
    - task: Kubernetes@1
      displayName: 'Create a new namespace for the pull request'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'sp-learn-aks'
        azureResourceGroup: 'rg-pretty-grubworm'
        kubernetesCluster: 'k8stest'
        command: 'apply'
        useConfigurationFile: true
        configurationType: 'inline'
        inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(AKS.Namespace)" }}'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
    - task: Kubernetes@1
      displayName: apply
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'sp-learn-aks'
        azureResourceGroup: 'rg-pretty-grubworm'
        kubernetesCluster: 'k8stest'
        namespace: '$(AKS.Namespace)'
        command: 'create'
        arguments: '-f $(manifestfile)'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
    - task: KubernetesManifest@1
      inputs:
        action: 'deploy'
        connectionType: 'azureResourceManager'
        azureSubscriptionConnection: 'sp-learn-aks'
        azureResourceGroup: 'rg-pretty-grubworm'
        kubernetesCluster: 'k8stest'
        manifests: '$(manifestfile)'